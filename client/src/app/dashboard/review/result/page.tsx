"use client";

// Import Next.js navigation hooks
import { useSearchParams, useRouter } from "next/navigation";

// Import UI components
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

// Import icons t·ª´ Lucide React
import { Trophy, RotateCcw, Home, TrendingUp, BookOpen, ArrowLeft } from "lucide-react";

/**
 * Component trang k·∫øt qu·∫£ b√†i luy·ªán t·∫≠p
 * Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë, ph·∫ßn trƒÉm ƒë√∫ng v√† c√°c t√πy ch·ªçn ƒëi·ªÅu h∆∞·ªõng
 */
export default function ResultPage() {
  // L·∫•y tham s·ªë t·ª´ URL
  const searchParams = useSearchParams();
  const router = useRouter();

  // Parse c√°c tham s·ªë t·ª´ URL
  const score = parseInt(searchParams.get("score") || "0");     // S·ªë c√¢u ƒë√∫ng
  const total = parseInt(searchParams.get("total") || "1");    // T·ªïng s·ªë c√¢u
  const type = searchParams.get("type") || "";                 // Lo·∫°i c√¢u h·ªèi
  const topic = searchParams.get("topic") || "";              // Ch·ªß ƒë·ªÅ

  // T√≠nh ph·∫ßn trƒÉm ƒë√∫ng
  const percentage = Math.round((score / total) * 100);

  // H√†m tr·∫£ v·ªÅ th√¥ng ƒëi·ªáp d·ª±a tr√™n ph·∫ßn trƒÉm ƒë√∫ng
  const getPerformanceMessage = () => {
    if (percentage >= 90) return "Xu·∫•t s·∫Øc! üåü";
    if (percentage >= 70) return "T·ªët l·∫Øm! üëè";
    if (percentage >= 50) return "Kh√° ƒë·∫•y! üí™";
    return "C·∫ßn c·ªë g·∫Øng th√™m! üìö";
  };

  // H√†m tr·∫£ v·ªÅ m√†u s·∫Øc d·ª±a tr√™n ph·∫ßn trƒÉm ƒë√∫ng
  const getPerformanceColor = () => {
    if (percentage >= 90) return "text-green-600";
    if (percentage >= 70) return "text-blue-600";
    if (percentage >= 50) return "text-orange-600";
    return "text-red-600";
  };

  // C√°c h√†m x·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng
  const handleRestart = () => {
    // L√†m l·∫°i b√†i v·ªõi c√πng ch·ªß ƒë·ªÅ
    router.push(`/dashboard/review/practice?type=${type}&topic=${topic}`);
  };

  const handleBackToReview = () => {
    // Quay v·ªÅ trang ch·ªçn ch·ªß ƒë·ªÅ
    router.push("/dashboard/review");
  };

  const handleBackToDashboard = () => {
    // Quay v·ªÅ dashboard ch√≠nh
    router.push("/dashboard");
  };

  const getTopicName = () => {
    const topicNames: Record<string, string> = {
      "daily-life": "Cu·ªôc s·ªëng h√†ng ng√†y",
      "work": "C√¥ng vi·ªác",
      "travel": "Du l·ªãch",
      "education": "Gi√°o d·ª•c",
      "technology": "C√¥ng ngh·ªá",
      "health": "S·ª©c kh·ªèe",
      "tenses": "Th√¨ trong ti·∫øng Anh",
      "conditionals": "C√¢u ƒëi·ªÅu ki·ªán",
      "passive-voice": "C√¢u b·ªã ƒë·ªông",
      "reported-speech": "C√¢u t∆∞·ªùng thu·∫≠t",
      "modal-verbs": "ƒê·ªông t·ª´ khuy·∫øt thi·∫øu",
      "relative-clauses": "M·ªánh ƒë·ªÅ quan h·ªá",
      "articles": "M·∫°o t·ª´",
      "prepositions": "Gi·ªõi t·ª´",
    };
    return topicNames[topic] || topic;
  };

  return (
    <div className="max-w-2xl mx-auto space-y-6">
      {/* Breadcrumb Navigation */}
      <nav className="flex items-center space-x-2 text-sm text-slate-600">
        <Button variant="ghost" size="sm" onClick={handleBackToDashboard} className="gap-1 p-1 h-auto">
          <Home className="h-3 w-3" />
          Trang ch·ªß
        </Button>
        <span>/</span>
        <Button variant="ghost" size="sm" onClick={handleBackToReview} className="gap-1 p-1 h-auto">
          <BookOpen className="h-3 w-3" />
          √în t·∫≠p
        </Button>
        <span>/</span>
        <span className="text-slate-900 font-medium">
          K·∫øt qu·∫£ - {type === "vocabulary" ? "T·ª´ v·ª±ng" : "Ng·ªØ ph√°p"} - {getTopicName()}
        </span>
      </nav>

      <Card className="shadow-lg">
        <CardHeader className="text-center space-y-4 pb-8">
          <div className="flex justify-center">
            <div className="p-6 bg-gradient-to-br from-yellow-100 to-orange-100 rounded-full">
              <Trophy className="h-16 w-16 text-yellow-600" />
            </div>
          </div>
          <CardTitle className="text-3xl">Ho√†n th√†nh!</CardTitle>
        </CardHeader>
        <CardContent className="space-y-8">
          <div className="text-center space-y-4">
            <div className={`text-5xl font-bold ${getPerformanceColor()}`}>
              {score}/{total}
            </div>
            <p className="text-xl text-slate-600">{getPerformanceMessage()}</p>
            <div className="max-w-md mx-auto space-y-2">
              <div className="w-full bg-slate-200 rounded-full h-3">
                <div
                  className="bg-green-500 h-3 rounded-full transition-all duration-300"
                  style={{ width: `${percentage}%` }}
                />
              </div>
              <p className="text-sm text-slate-500">ƒê·ªô ch√≠nh x√°c: {percentage}%</p>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4 py-6 border-y border-slate-200">
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{score}</div>
              <div className="text-sm text-slate-600">C√¢u ƒë√∫ng</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">{total - score}</div>
              <div className="text-sm text-slate-600">C√¢u sai</div>
            </div>
          </div>

          <div className="space-y-3">
            <Button
              onClick={handleRestart}
              className="w-full gap-2"
              size="lg"
            >
              <RotateCcw className="h-4 w-4" />
              L√†m l·∫°i b√†i n√†y
            </Button>
            <Button
              onClick={handleBackToReview}
              variant="outline"
              className="w-full gap-2"
              size="lg"
            >
              <TrendingUp className="h-4 w-4" />
              Ch·ªçn b√†i kh√°c
            </Button>
            <div className="flex gap-2">
              <Button
                onClick={handleBackToDashboard}
                variant="ghost"
                className="flex-1 gap-2"
                size="lg"
              >
                <Home className="h-4 w-4" />
                V·ªÅ trang ch·ªß
              </Button>
              <Button
                onClick={() => router.push("/dashboard/review")}
                variant="ghost"
                className="flex-1 gap-2"
                size="lg"
              >
                <ArrowLeft className="h-4 w-4" />
                V·ªÅ √¥n t·∫≠p
              </Button>
            </div>
          </div>

          {percentage < 70 && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-sm text-blue-900">
                <strong>G·ª£i √Ω:</strong> H√£y xem l·∫°i ph·∫ßn gi·∫£i th√≠ch sau m·ªói c√¢u h·ªèi ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ l·ªói sai c·ªßa b·∫°n.
                Luy·ªán t·∫≠p th∆∞·ªùng xuy√™n s·∫Ω gi√∫p b·∫°n c·∫£i thi·ªán k·∫øt qu·∫£!
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
