import { NextRequest, NextResponse } from "next/server";
import { jwtVerify } from "jose";

// üîë Secret ph·∫£i tr√πng v·ªõi backend
const SECRET = new TextEncoder().encode(process.env.JWT_SECRET || "study-english");

// üß≠ Danh s√°ch route c·∫ßn ƒëƒÉng nh·∫≠p
const protectedRoutes = ["/dashboard", "/profile", "/admin"];

export async function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;
  const token = req.cookies.get("accessToken")?.value;

  // --- 1Ô∏è‚É£ N·∫øu ng∆∞·ªùi d√πng v√†o /login ho·∫∑c /register ---
  if (pathname === "/login" || pathname === "/register") {
    // N·∫øu c√≥ token => ki·ªÉm tra h·ª£p l·ªá
    if (token) {
      try {
        await jwtVerify(token, SECRET);
        // ‚úÖ Token h·ª£p l·ªá => redirect sang dashboard
        return NextResponse.redirect(new URL("/dashboard", req.url));
      } catch {
        // ‚ùå Token l·ªói => cho v√†o trang b√¨nh th∆∞·ªùng
        return NextResponse.next();
      }
    }
    // ‚ùå Kh√¥ng c√≥ token => cho v√†o trang b√¨nh th∆∞·ªùng
    return NextResponse.next();
  }

  // --- 2Ô∏è‚É£ N·∫øu route kh√¥ng ƒë∆∞·ª£c b·∫£o v·ªá => cho qua ---
  if (!protectedRoutes.some((route) => pathname.startsWith(route))) {
    return NextResponse.next();
  }

  // --- 3Ô∏è‚É£ N·∫øu route ƒë∆∞·ª£c b·∫£o v·ªá ---
  if (!token) {
    // ‚ùå Kh√¥ng c√≥ token => v·ªÅ login
    return NextResponse.redirect(new URL("/login", req.url));
  }

  try {
    // ‚úÖ Token h·ª£p l·ªá => cho ph√©p
    await jwtVerify(token, SECRET);
    return NextResponse.next();
  } catch {
    // ‚ùå Token h·∫øt h·∫°n ho·∫∑c sai => v·ªÅ login
    return NextResponse.redirect(new URL("/login", req.url));
  }
}

// ‚öôÔ∏è √Åp d·ª•ng middleware cho c√°c route c·ª• th·ªÉ
export const config = {
  matcher: [
    "/login",
    "/register",
    "/profile/:path*",
    "/dashboard/:path*",
    "/admin/:path*"
  ],
};
